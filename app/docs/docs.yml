swagger: "2.0"
info:
  description: "This is a sample server Petstore server"
  version: "1.0.0"
  title: "Swagger Petstore"
tags:
- name: "Author"
- name: "Posts"
  
paths:
  /authors:
    get:
      tags:
      - "Author"
      summary: "Return all authors registered"
      description: ""
      produces:
      - "application/json"
      responses:
        "200":
          description: "ok"
    post:
      tags:
      - "Author"
      summary: "Register a new author"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "path"
        description: "Register a new author"
        required: true
        schema:
          $ref: "#/definitions/Author_post"
      responses:
        "200":
          description: "ok"
          
  /authors/{author_id}:
    get:
      tags:
      - "Author"
      summary: "Find the author by objectid"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "author_id"
        in: "path"
        description: "Insert the valid author ObjectID"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid status value"

  /posts:
    get:
      tags:
      - "Posts"
      summary: "Return all posts registered"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "title"
        in: "query"
        description: "You can filter the results by post title"
        required: false
        type: "string"
      responses:
        "200":
          description: "ok"
    post:
      tags:
      - "Posts"
      summary: "Register a new post"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "path"
        description: "Register a new post"
        required: true
        schema:
          $ref: "#/definitions/Post_post_put"
      responses:
        "201":
          description: "ok"

  /posts/{post_id}:
    get:
      tags:
      - "Posts"
      summary: "Find the post by objectid"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "post_id"
        in: "path"
        description: "Insert the valid post ObjectID"
        required: true
        type: "string"
      responses:
        "200":
          description: "ok"
    put:
      tags:
      - "Posts"
      summary: "Update an existing post"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "post_id"
        in: "path"
        description: "Insert the valid post ObjectID"
        required: true
        type: "string"
      - in: "body"
        name: "path"
        description: "Update a registered post"
        required: true
        schema:
          $ref: "#/definitions/Post_post_put"
      responses:
        "200":
          description: "Invalid ID supplied"
    delete:
      tags:
      - "Posts"
      summary: "Deletes a existing post"
      description: ""
      parameters:
      - name: "post_id"
        in: "path"
        description: "Insert the valid post ObjectID"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"

definitions:
  Author_post:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        example: "Ipsum lorem"

  Post_post_put:
    type: "object"
    required:
     - "author"
     - "title"
     - "content"
    properties:
      author:
        type: "string"
        example: "A Valid Author ObjectId"
      title:
        type: "string"
        example: "Lorem ipsum Interdum curabitur donec"
      content:
        type: "string"
        example: "Interdum velit laoreet id donec ultrices. Laoreet non curabitur gravida arcu. Proin sed libero enim sed faucibus turpis in eu. Eget gravida cum sociis natoque penatibus. Sed vulputate odio ut enim blandit volutpat maecenas. Scelerisque eu ultrices vitae auctor eu augue ut lectus arcu. Lectus nulla at volutpat diam. Quisque egestas diam in arcu cursus euismod. Amet porttitor eget dolor morbi non arcu. Integer eget aliquet nibh praesent. In hac habitasse platea dictumst. Blandit volutpat maecenas volutpat blandit aliquam etiam. Hac habitasse platea dictumst quisque sagittis purus sit amet. Amet facilisis magna etiam tempor orci eu lobortis."

